#include <iostream>
#include <fstream>
#include <vector>
#include <cstring>
using namespace std;

#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/calib3d/calib3d.hpp>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>

typedef pcl::PointXYZRGBA PointT;
typedef pcl::PointCloud<PointT> PointCloud;



//相机内参
struct CAMERA_INTRINSIC_PARAMETERS
{
    double cx,cy,fx,fy,scale;
};

//帧结构
struct Frame
{
    cv::Mat rgb,depth;
    cv::Mat desp;
    vector<cv::KeyPoint> kp;
};

//PnP 结果
struct Result_of_PnP
{
    cv::Mat rvec,tvec;
    int inliers;
};


//函数接口
PointCloud::Ptr image2PointCloud(cv::Mat& rgb,cv::Mat& depth,CAMERA_INTRINSIC_PARAMETERS& camera);

cv::Point3f point2dTo3d(cv::Point3f& point,CAMERA_INTRINSIC_PARAMETERS& camera);

//提取图像关键点和描述子函数
void computeKeyPointsAndDesp(Frame& frame,string detector,string descriptor);

//计算两帧之间运动的函数
Result_of_PnP estimateMotion(Frame& frame1,Frame& frame2,CAMERA_INTRINSIC_PARAMETERS& camera);



// 参数读取类
class ParameterReader
{
public:
    ParameterReader( string filename="/home/yh/myslam/parameters.txt" )
    {
        ifstream fin( filename.c_str() );
        if (!fin)
        {
            cerr<<"parameter file does not exist."<<endl;
            return;
        }
        while(!fin.eof())
        {
            string str;
            getline( fin, str );
            if (str[0] == '#')
            {
                // 以‘＃’开头的是注释
                continue;
            }

            int pos = str.find("=");
            if (pos == -1)
                continue;
            string key = str.substr( 0, pos );
            string value = str.substr( pos+1, str.length() );
            data[key] = value;

            if ( !fin.good() )
                break;
        }
    }
    string getData( string key )
    {
        map<string, string>::iterator iter = data.find(key);
        if (iter == data.end())
        {
            cerr<<"Parameter name "<<key<<" not found!"<<endl;
            return string("NOT_FOUND");
        }
        return iter->second;
    }
public:
    map<string, string> data;
};